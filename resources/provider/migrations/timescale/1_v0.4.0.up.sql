-- Autogenerated by migration tool on 2022-01-19 11:52:48

-- Resource: apps.daemon_sets
CREATE TABLE IF NOT EXISTS "k8s_apps_daemon_sets" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"context" text,
	"name" text,
	"generate_name" text,
	"namespace" text,
	"self_link" text,
	"uid" text,
	"resource_version" text,
	"generation" bigint,
	"deletion_grace_period_seconds" bigint,
	"labels" jsonb,
	"annotations" jsonb,
	"owner_references" jsonb,
	"finalizers" text[],
	"cluster_name" text,
	"managed_fields" jsonb,
	"selector_match_labels" jsonb,
	"template" jsonb,
	"update_strategy_type" text,
	"update_strategy_rolling_update_max_unavailable_type" bigint,
	"update_strategy_rolling_update_max_unavailable_int_val" integer,
	"update_strategy_rolling_update_max_unavailable_str_val" text,
	"update_strategy_rolling_update_max_surge_type" bigint,
	"update_strategy_rolling_update_max_surge_int_val" integer,
	"update_strategy_rolling_update_max_surge_str_val" text,
	"min_ready_seconds" integer,
	"revision_history_limit" integer,
	"status_current_number_scheduled" integer,
	"status_number_misscheduled" integer,
	"status_desired_number_scheduled" integer,
	"status_number_ready" integer,
	"status_observed_generation" bigint,
	"status_updated_number_scheduled" integer,
	"status_number_available" integer,
	"status_number_unavailable" integer,
	"status_collision_count" integer,
	CONSTRAINT k8s_apps_daemon_sets_pk PRIMARY KEY(cq_fetch_date,uid),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('k8s_apps_daemon_sets');
CREATE TABLE IF NOT EXISTS "k8s_apps_daemon_set_selector_match_expressions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"daemon_set_cq_id" uuid,
	"key" text,
	"operator" text,
	"values" text[],
	CONSTRAINT k8s_apps_daemon_set_selector_match_expressions_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_apps_daemon_set_selector_match_expressions (cq_fetch_date, daemon_set_cq_id);
SELECT setup_tsdb_child('k8s_apps_daemon_set_selector_match_expressions', 'daemon_set_cq_id', 'k8s_apps_daemon_sets', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_apps_daemon_set_status_conditions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"daemon_set_cq_id" uuid,
	"type" text,
	"status" text,
	"reason" text,
	"message" text,
	CONSTRAINT k8s_apps_daemon_set_status_conditions_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_apps_daemon_set_status_conditions (cq_fetch_date, daemon_set_cq_id);
SELECT setup_tsdb_child('k8s_apps_daemon_set_status_conditions', 'daemon_set_cq_id', 'k8s_apps_daemon_sets', 'cq_id');

-- Resource: apps.deployments
CREATE TABLE IF NOT EXISTS "k8s_apps_deployments" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"context" text,
	"kind" text,
	"api_version" text,
	"name" text,
	"generate_name" text,
	"namespace" text,
	"self_link" text,
	"uid" text,
	"resource_version" text,
	"generation" bigint,
	"deletion_grace_period_seconds" bigint,
	"labels" jsonb,
	"annotations" jsonb,
	"owner_references" jsonb,
	"finalizers" text[],
	"cluster_name" text,
	"managed_fields" jsonb,
	"replicas" integer,
	"selector_match_labels" jsonb,
	"template" jsonb,
	"strategy_type" text,
	"strategy_rolling_update_max_unavailable_type" bigint,
	"strategy_rolling_update_max_unavailable_int_val" integer,
	"strategy_rolling_update_max_unavailable_str_val" text,
	"strategy_rolling_update_max_surge_type" bigint,
	"strategy_rolling_update_max_surge_int_val" integer,
	"strategy_rolling_update_max_surge_str_val" text,
	"min_ready_seconds" integer,
	"revision_history_limit" integer,
	"paused" boolean,
	"progress_deadline_seconds" integer,
	"status_observed_generation" bigint,
	"status_replicas" integer,
	"status_updated_replicas" integer,
	"status_ready_replicas" integer,
	"status_available_replicas" integer,
	"status_unavailable_replicas" integer,
	"status_collision_count" integer,
	CONSTRAINT k8s_apps_deployments_pk PRIMARY KEY(cq_fetch_date,uid),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('k8s_apps_deployments');
CREATE TABLE IF NOT EXISTS "k8s_apps_deployment_selector_match_expressions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"deployment_cq_id" uuid,
	"key" text,
	"operator" text,
	"values" text[],
	CONSTRAINT k8s_apps_deployment_selector_match_expressions_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_apps_deployment_selector_match_expressions (cq_fetch_date, deployment_cq_id);
SELECT setup_tsdb_child('k8s_apps_deployment_selector_match_expressions', 'deployment_cq_id', 'k8s_apps_deployments', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_apps_deployment_status_conditions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"deployment_cq_id" uuid,
	"type" text,
	"status" text,
	"reason" text,
	"message" text,
	CONSTRAINT k8s_apps_deployment_status_conditions_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_apps_deployment_status_conditions (cq_fetch_date, deployment_cq_id);
SELECT setup_tsdb_child('k8s_apps_deployment_status_conditions', 'deployment_cq_id', 'k8s_apps_deployments', 'cq_id');

-- Resource: apps.replica_sets
CREATE TABLE IF NOT EXISTS "k8s_apps_replica_sets" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"context" text,
	"name" text,
	"generate_name" text,
	"namespace" text,
	"self_link" text,
	"uid" text,
	"resource_version" text,
	"generation" bigint,
	"deletion_grace_period_seconds" bigint,
	"labels" jsonb,
	"annotations" jsonb,
	"owner_references" jsonb,
	"finalizers" text[],
	"cluster_name" text,
	"managed_fields" jsonb,
	"replicas" integer,
	"min_ready_seconds" integer,
	"selector_match_labels" jsonb,
	"template" jsonb,
	"status_replicas" integer,
	"status_fully_labeled_replicas" integer,
	"status_ready_replicas" integer,
	"status_available_replicas" integer,
	"status_observed_generation" bigint,
	CONSTRAINT k8s_apps_replica_sets_pk PRIMARY KEY(cq_fetch_date,uid),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('k8s_apps_replica_sets');
CREATE TABLE IF NOT EXISTS "k8s_apps_replica_set_selector_match_expressions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"replica_set_cq_id" uuid,
	"key" text,
	"operator" text,
	"values" text[],
	CONSTRAINT k8s_apps_replica_set_selector_match_expressions_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_apps_replica_set_selector_match_expressions (cq_fetch_date, replica_set_cq_id);
SELECT setup_tsdb_child('k8s_apps_replica_set_selector_match_expressions', 'replica_set_cq_id', 'k8s_apps_replica_sets', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_apps_replica_set_status_conditions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"replica_set_cq_id" uuid,
	"type" text,
	"status" text,
	"reason" text,
	"message" text,
	CONSTRAINT k8s_apps_replica_set_status_conditions_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_apps_replica_set_status_conditions (cq_fetch_date, replica_set_cq_id);
SELECT setup_tsdb_child('k8s_apps_replica_set_status_conditions', 'replica_set_cq_id', 'k8s_apps_replica_sets', 'cq_id');

-- Resource: apps.stateful_sets
CREATE TABLE IF NOT EXISTS "k8s_apps_stateful_sets" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"context" text,
	"name" text,
	"generate_name" text,
	"namespace" text,
	"self_link" text,
	"uid" text,
	"resource_version" text,
	"generation" bigint,
	"deletion_grace_period_seconds" bigint,
	"labels" jsonb,
	"annotations" jsonb,
	"owner_references" jsonb,
	"finalizers" text[],
	"cluster_name" text,
	"managed_fields" jsonb,
	"replicas" integer,
	"selector_match_labels" jsonb,
	"template" jsonb,
	"volume_claim_templates" jsonb,
	"service_name" text,
	"pod_management_policy" text,
	"update_strategy_type" text,
	"update_strategy_rolling_update_partition" integer,
	"revision_history_limit" integer,
	"min_ready_seconds" integer,
	"status_observed_generation" bigint,
	"status_replicas" integer,
	"status_ready_replicas" integer,
	"status_current_replicas" integer,
	"status_updated_replicas" integer,
	"status_current_revision" text,
	"status_update_revision" text,
	"status_collision_count" integer,
	"status_available_replicas" integer,
	CONSTRAINT k8s_apps_stateful_sets_pk PRIMARY KEY(cq_fetch_date,uid),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('k8s_apps_stateful_sets');
CREATE TABLE IF NOT EXISTS "k8s_apps_stateful_set_selector_match_expressions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"stateful_set_cq_id" uuid,
	"key" text,
	"operator" text,
	"values" text[],
	CONSTRAINT k8s_apps_stateful_set_selector_match_expressions_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_apps_stateful_set_selector_match_expressions (cq_fetch_date, stateful_set_cq_id);
SELECT setup_tsdb_child('k8s_apps_stateful_set_selector_match_expressions', 'stateful_set_cq_id', 'k8s_apps_stateful_sets', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_apps_stateful_set_status_conditions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"stateful_set_cq_id" uuid,
	"type" text,
	"status" text,
	"reason" text,
	"message" text,
	CONSTRAINT k8s_apps_stateful_set_status_conditions_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_apps_stateful_set_status_conditions (cq_fetch_date, stateful_set_cq_id);
SELECT setup_tsdb_child('k8s_apps_stateful_set_status_conditions', 'stateful_set_cq_id', 'k8s_apps_stateful_sets', 'cq_id');

-- Resource: batch.cron_jobs
CREATE TABLE IF NOT EXISTS "k8s_batch_cron_jobs" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"context" text,
	"name" text,
	"generate_name" text,
	"namespace" text,
	"self_link" text,
	"uid" text,
	"resource_version" text,
	"generation" bigint,
	"deletion_grace_period_seconds" bigint,
	"labels" jsonb,
	"annotations" jsonb,
	"owner_references" jsonb,
	"finalizers" text[],
	"cluster_name" text,
	"managed_fields" jsonb,
	"schedule" text,
	"starting_deadline_seconds" bigint,
	"concurrency_policy" text,
	"suspend" boolean,
	"job_template" jsonb,
	"successful_jobs_history_limit" integer,
	"failed_jobs_history_limit" integer,
	"status" jsonb,
	CONSTRAINT k8s_batch_cron_jobs_pk PRIMARY KEY(cq_fetch_date,uid),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('k8s_batch_cron_jobs');

-- Resource: batch.jobs
CREATE TABLE IF NOT EXISTS "k8s_batch_jobs" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"context" text,
	"name" text,
	"generate_name" text,
	"namespace" text,
	"self_link" text,
	"uid" text,
	"resource_version" text,
	"generation" bigint,
	"deletion_grace_period_seconds" bigint,
	"labels" jsonb,
	"annotations" jsonb,
	"owner_references" jsonb,
	"finalizers" text[],
	"cluster_name" text,
	"managed_fields" jsonb,
	"parallelism" integer,
	"completions" integer,
	"active_deadline_seconds" bigint,
	"backoff_limit" integer,
	"selector_match_labels" jsonb,
	"manual_selector" boolean,
	"template" jsonb,
	"ttl_seconds_after_finished" integer,
	"completion_mode" text,
	"suspend" boolean,
	"status_active" integer,
	"status_succeeded" integer,
	"status_failed" integer,
	"status_completed_indexes" text,
	"status_uncounted_terminated_pods_succeeded" text[],
	"status_uncounted_terminated_pods_failed" text[],
	CONSTRAINT k8s_batch_jobs_pk PRIMARY KEY(cq_fetch_date,uid),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('k8s_batch_jobs');
CREATE TABLE IF NOT EXISTS "k8s_batch_job_selector_match_expressions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"job_cq_id" uuid,
	"key" text,
	"operator" text,
	"values" text[],
	CONSTRAINT k8s_batch_job_selector_match_expressions_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_batch_job_selector_match_expressions (cq_fetch_date, job_cq_id);
SELECT setup_tsdb_child('k8s_batch_job_selector_match_expressions', 'job_cq_id', 'k8s_batch_jobs', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_batch_job_status_conditions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"job_cq_id" uuid,
	"type" text,
	"status" text,
	"reason" text,
	"message" text,
	CONSTRAINT k8s_batch_job_status_conditions_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_batch_job_status_conditions (cq_fetch_date, job_cq_id);
SELECT setup_tsdb_child('k8s_batch_job_status_conditions', 'job_cq_id', 'k8s_batch_jobs', 'cq_id');

-- Resource: core.endpoints
CREATE TABLE IF NOT EXISTS "k8s_core_endpoints" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"context" text,
	"kind" text,
	"api_version" text,
	"name" text,
	"generate_name" text,
	"namespace" text,
	"self_link" text,
	"uid" text,
	"resource_version" text,
	"generation" bigint,
	"deletion_grace_period_seconds" bigint,
	"labels" jsonb,
	"annotations" jsonb,
	"owner_references" jsonb,
	"finalizers" text[],
	"cluster_name" text,
	"managed_fields" jsonb,
	CONSTRAINT k8s_core_endpoints_pk PRIMARY KEY(cq_fetch_date,uid),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('k8s_core_endpoints');
CREATE TABLE IF NOT EXISTS "k8s_core_endpoint_subsets" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"endpoint_cq_id" uuid,
	"endpoint_name" text,
	"endpoint_uid" text,
	CONSTRAINT k8s_core_endpoint_subsets_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_core_endpoint_subsets (cq_fetch_date, endpoint_cq_id);
SELECT setup_tsdb_child('k8s_core_endpoint_subsets', 'endpoint_cq_id', 'k8s_core_endpoints', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_core_endpoint_subset_addresses" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"endpoint_subset_cq_id" uuid,
	"ip" inet,
	"hostname" text,
	"node_name" text,
	"target_ref_kind" text,
	"target_ref_namespace" text,
	"target_ref_name" text,
	"target_ref_uid" text,
	"target_ref_api_version" text,
	"target_ref_resource_version" text,
	"target_ref_field_path" text,
	CONSTRAINT k8s_core_endpoint_subset_addresses_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_core_endpoint_subset_addresses (cq_fetch_date, endpoint_subset_cq_id);
SELECT setup_tsdb_child('k8s_core_endpoint_subset_addresses', 'endpoint_subset_cq_id', 'k8s_core_endpoint_subsets', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_core_endpoint_subset_not_ready_addresses" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"endpoint_subset_cq_id" uuid,
	"ip" inet,
	"hostname" text,
	"node_name" text,
	"target_ref_kind" text,
	"target_ref_namespace" text,
	"target_ref_name" text,
	"target_ref_uid" text,
	"target_ref_api_version" text,
	"target_ref_resource_version" text,
	"target_ref_field_path" text,
	CONSTRAINT k8s_core_endpoint_subset_not_ready_addresses_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_core_endpoint_subset_not_ready_addresses (cq_fetch_date, endpoint_subset_cq_id);
SELECT setup_tsdb_child('k8s_core_endpoint_subset_not_ready_addresses', 'endpoint_subset_cq_id', 'k8s_core_endpoint_subsets', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_core_endpoint_subset_ports" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"endpoint_subset_cq_id" uuid,
	"name" text,
	"port" integer,
	"protocol" text,
	"app_protocol" text,
	CONSTRAINT k8s_core_endpoint_subset_ports_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_core_endpoint_subset_ports (cq_fetch_date, endpoint_subset_cq_id);
SELECT setup_tsdb_child('k8s_core_endpoint_subset_ports', 'endpoint_subset_cq_id', 'k8s_core_endpoint_subsets', 'cq_id');

-- Resource: core.limit_ranges
CREATE TABLE IF NOT EXISTS "k8s_core_limit_ranges" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"context" text,
	"kind" text,
	"api_version" text,
	"name" text,
	"generate_name" text,
	"namespace" text,
	"self_link" text,
	"uid" text,
	"resource_version" text,
	"generation" bigint,
	"deletion_grace_period_seconds" bigint,
	"labels" jsonb,
	"annotations" jsonb,
	"owner_references" jsonb,
	"finalizers" text[],
	"cluster_name" text,
	"managed_fields" jsonb,
	CONSTRAINT k8s_core_limit_ranges_pk PRIMARY KEY(cq_fetch_date,uid),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('k8s_core_limit_ranges');
CREATE TABLE IF NOT EXISTS "k8s_core_limit_range_limits" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"limit_range_cq_id" uuid,
	"type" text,
	"max" jsonb,
	"min" jsonb,
	"default" jsonb,
	"default_request" jsonb,
	"max_limit_request_ratio" jsonb,
	CONSTRAINT k8s_core_limit_range_limits_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_core_limit_range_limits (cq_fetch_date, limit_range_cq_id);
SELECT setup_tsdb_child('k8s_core_limit_range_limits', 'limit_range_cq_id', 'k8s_core_limit_ranges', 'cq_id');

-- Resource: core.namespaces
CREATE TABLE IF NOT EXISTS "k8s_core_namespaces" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"context" text,
	"kind" text,
	"api_version" text,
	"name" text,
	"generate_name" text,
	"namespace" text,
	"self_link" text,
	"uid" text,
	"resource_version" text,
	"generation" bigint,
	"deletion_grace_period_seconds" bigint,
	"labels" jsonb,
	"annotations" jsonb,
	"owner_references" jsonb,
	"finalizers" text[],
	"cluster_name" text,
	"managed_fields" jsonb,
	"spec_finalizers" text[],
	"phase" text,
	"conditions" jsonb,
	CONSTRAINT k8s_core_namespaces_pk PRIMARY KEY(cq_fetch_date,uid),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('k8s_core_namespaces');
CREATE TABLE IF NOT EXISTS "k8s_meta_owner_references" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"namespace_cq_id" uuid,
	"resource_uid" text,
	"api_version" text,
	"kind" text,
	"name" text,
	"owner_uid" text,
	"controller" boolean,
	"block_owner_deletion" boolean,
	CONSTRAINT k8s_meta_owner_references_pk PRIMARY KEY(cq_fetch_date,resource_uid,owner_uid),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_meta_owner_references (cq_fetch_date, namespace_cq_id);
SELECT setup_tsdb_child('k8s_meta_owner_references', 'namespace_cq_id', 'k8s_core_namespaces', 'cq_id');

-- Resource: core.nodes
CREATE TABLE IF NOT EXISTS "k8s_core_nodes" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"context" text,
	"kind" text,
	"api_version" text,
	"name" text,
	"namespace" text,
	"uid" text,
	"resource_version" text,
	"generation" bigint,
	"deletion_grace_period_seconds" bigint,
	"labels" jsonb,
	"annotations" jsonb,
	"owner_references" jsonb,
	"finalizers" text[],
	"cluster_name" text,
	"pod_cidr" cidr,
	"pod_cidrs" cidr[],
	"provider_id" text,
	"unschedulable" boolean,
	"taints" jsonb,
	"capacity" jsonb,
	"allocatable" jsonb,
	"phase" text,
	"conditions" jsonb,
	"daemon_endpoints_kubelet_endpoint_port" integer,
	"machine_id" text,
	"system_uuid" text,
	"boot_id" text,
	"kernel_version" text,
	"os_image" text,
	"container_runtime_version" text,
	"kubelet_version" text,
	"kube_proxy_version" text,
	"operating_system" text,
	"architecture" text,
	"volumes_in_use" text[],
	"config" jsonb,
	"hostname" text,
	"internal_ip" inet,
	"external_ip" inet,
	CONSTRAINT k8s_core_nodes_pk PRIMARY KEY(cq_fetch_date,uid),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('k8s_core_nodes');
CREATE TABLE IF NOT EXISTS "k8s_core_node_images" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"node_cq_id" uuid,
	"names" text[],
	"size_bytes" bigint,
	CONSTRAINT k8s_core_node_images_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_core_node_images (cq_fetch_date, node_cq_id);
SELECT setup_tsdb_child('k8s_core_node_images', 'node_cq_id', 'k8s_core_nodes', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_core_node_volumes_attached" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"node_cq_id" uuid,
	"name" text,
	"device_path" text,
	CONSTRAINT k8s_core_node_volumes_attached_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_core_node_volumes_attached (cq_fetch_date, node_cq_id);
SELECT setup_tsdb_child('k8s_core_node_volumes_attached', 'node_cq_id', 'k8s_core_nodes', 'cq_id');

-- Resource: core.pods
CREATE TABLE IF NOT EXISTS "k8s_core_pods" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"context" text,
	"kind" text,
	"api_version" text,
	"name" text,
	"namespace" text,
	"uid" text,
	"resource_version" text,
	"generation" bigint,
	"deletion_grace_period_seconds" bigint,
	"labels" jsonb,
	"annotations" jsonb,
	"owner_references" jsonb,
	"finalizers" text[],
	"cluster_name" text,
	"restart_policy" text,
	"termination_grace_period_seconds" bigint,
	"active_deadline_seconds" bigint,
	"dns_policy" text,
	"node_selector" jsonb,
	"service_account_name" text,
	"automount_service_account_token" boolean,
	"node_name" text,
	"host_network" boolean,
	"host_pid" boolean,
	"host_ipc" boolean,
	"share_process_namespace" boolean,
	"security_context" jsonb,
	"image_pull_secrets" jsonb,
	"hostname" text,
	"subdomain" text,
	"affinity" jsonb,
	"scheduler_name" text,
	"tolerations" jsonb,
	"host_aliases" jsonb,
	"priority_class_name" text,
	"priority" integer,
	"dns_config" jsonb,
	"readiness_gates" jsonb,
	"runtime_class_name" text,
	"enable_service_links" boolean,
	"preemption_policy" text,
	"overhead" jsonb,
	"topology_spread_constraints" jsonb,
	"set_hostname_as_fqdn" boolean,
	"phase" text,
	"conditions" jsonb,
	"message" text,
	"reason" text,
	"nominated_node_name" text,
	"host_ip" inet,
	"pod_ip" inet,
	"pod_ips" inet[],
	"qos_class" text,
	CONSTRAINT k8s_core_pods_pk PRIMARY KEY(cq_fetch_date,uid),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('k8s_core_pods');
CREATE TABLE IF NOT EXISTS "k8s_core_pod_init_containers" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"pod_cq_id" uuid,
	"name" text,
	"image" text,
	"command" text[],
	"args" text[],
	"working_dir" text,
	"env_from" jsonb,
	"resources_limits" jsonb,
	"resources_requests" jsonb,
	"liveness_probe" jsonb,
	"readiness_probe" jsonb,
	"startup_probe" jsonb,
	"lifecycle" jsonb,
	"termination_message_path" text,
	"termination_message_policy" text,
	"image_pull_policy" text,
	"security_context" jsonb,
	"stdin" boolean,
	"stdin_once" boolean,
	"tty" boolean,
	CONSTRAINT k8s_core_pod_init_containers_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_core_pod_init_containers (cq_fetch_date, pod_cq_id);
SELECT setup_tsdb_child('k8s_core_pod_init_containers', 'pod_cq_id', 'k8s_core_pods', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_core_pod_init_container_ports" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"pod_init_container_cq_id" uuid,
	"name" text,
	"host_port" integer,
	"container_port" integer,
	"protocol" text,
	"host_ip" text,
	CONSTRAINT k8s_core_pod_init_container_ports_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_core_pod_init_container_ports (cq_fetch_date, pod_init_container_cq_id);
SELECT setup_tsdb_child('k8s_core_pod_init_container_ports', 'pod_init_container_cq_id', 'k8s_core_pod_init_containers', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_core_pod_init_container_envs" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"pod_init_container_cq_id" uuid,
	"name" text,
	"value" text,
	"value_from_field_ref_api_version" text,
	"value_from_field_ref_field_path" text,
	"value_from_resource_field_ref_container_name" text,
	"value_from_resource_field_ref_resource" text,
	"value_from_resource_field_ref_divisor_format" text,
	"value_from_config_map_key_ref_local_object_reference_name" text,
	"value_from_config_map_key_ref_key" text,
	"value_from_config_map_key_ref_optional" boolean,
	"value_from_secret_key_ref_local_object_reference_name" text,
	"value_from_secret_key_ref_key" text,
	"value_from_secret_key_ref_optional" boolean,
	CONSTRAINT k8s_core_pod_init_container_envs_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_core_pod_init_container_envs (cq_fetch_date, pod_init_container_cq_id);
SELECT setup_tsdb_child('k8s_core_pod_init_container_envs', 'pod_init_container_cq_id', 'k8s_core_pod_init_containers', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_core_pod_init_container_volume_mounts" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"pod_init_container_cq_id" uuid,
	"name" text,
	"read_only" boolean,
	"mount_path" text,
	"sub_path" text,
	"mount_propagation" text,
	"sub_path_expr" text,
	CONSTRAINT k8s_core_pod_init_container_volume_mounts_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_core_pod_init_container_volume_mounts (cq_fetch_date, pod_init_container_cq_id);
SELECT setup_tsdb_child('k8s_core_pod_init_container_volume_mounts', 'pod_init_container_cq_id', 'k8s_core_pod_init_containers', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_core_pod_init_container_volume_devices" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"pod_init_container_cq_id" uuid,
	"name" text,
	"device_path" text,
	CONSTRAINT k8s_core_pod_init_container_volume_devices_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_core_pod_init_container_volume_devices (cq_fetch_date, pod_init_container_cq_id);
SELECT setup_tsdb_child('k8s_core_pod_init_container_volume_devices', 'pod_init_container_cq_id', 'k8s_core_pod_init_containers', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_core_pod_containers" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"pod_cq_id" uuid,
	"name" text,
	"image" text,
	"command" text[],
	"args" text[],
	"working_dir" text,
	"env_from" jsonb,
	"resources_limits" jsonb,
	"resources_requests" jsonb,
	"liveness_probe" jsonb,
	"readiness_probe" jsonb,
	"startup_probe" jsonb,
	"lifecycle" jsonb,
	"termination_message_path" text,
	"termination_message_policy" text,
	"image_pull_policy" text,
	"security_context" jsonb,
	"stdin" boolean,
	"stdin_once" boolean,
	"tty" boolean,
	CONSTRAINT k8s_core_pod_containers_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_core_pod_containers (cq_fetch_date, pod_cq_id);
SELECT setup_tsdb_child('k8s_core_pod_containers', 'pod_cq_id', 'k8s_core_pods', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_core_pod_container_ports" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"pod_container_cq_id" uuid,
	"name" text,
	"host_port" integer,
	"container_port" integer,
	"protocol" text,
	"host_ip" text,
	CONSTRAINT k8s_core_pod_container_ports_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_core_pod_container_ports (cq_fetch_date, pod_container_cq_id);
SELECT setup_tsdb_child('k8s_core_pod_container_ports', 'pod_container_cq_id', 'k8s_core_pod_containers', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_core_pod_container_envs" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"pod_container_cq_id" uuid,
	"name" text,
	"value" text,
	"value_from_field_ref_api_version" text,
	"value_from_field_ref_field_path" text,
	"value_from_resource_field_ref_container_name" text,
	"value_from_resource_field_ref_resource" text,
	"value_from_resource_field_ref_divisor_format" text,
	"value_from_config_map_key_ref_local_object_reference_name" text,
	"value_from_config_map_key_ref_key" text,
	"value_from_config_map_key_ref_optional" boolean,
	"value_from_secret_key_ref_local_object_reference_name" text,
	"value_from_secret_key_ref_key" text,
	"value_from_secret_key_ref_optional" boolean,
	CONSTRAINT k8s_core_pod_container_envs_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_core_pod_container_envs (cq_fetch_date, pod_container_cq_id);
SELECT setup_tsdb_child('k8s_core_pod_container_envs', 'pod_container_cq_id', 'k8s_core_pod_containers', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_core_pod_container_volume_mounts" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"pod_container_cq_id" uuid,
	"name" text,
	"read_only" boolean,
	"mount_path" text,
	"sub_path" text,
	"mount_propagation" text,
	"sub_path_expr" text,
	CONSTRAINT k8s_core_pod_container_volume_mounts_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_core_pod_container_volume_mounts (cq_fetch_date, pod_container_cq_id);
SELECT setup_tsdb_child('k8s_core_pod_container_volume_mounts', 'pod_container_cq_id', 'k8s_core_pod_containers', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_core_pod_container_volume_devices" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"pod_container_cq_id" uuid,
	"name" text,
	"device_path" text,
	CONSTRAINT k8s_core_pod_container_volume_devices_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_core_pod_container_volume_devices (cq_fetch_date, pod_container_cq_id);
SELECT setup_tsdb_child('k8s_core_pod_container_volume_devices', 'pod_container_cq_id', 'k8s_core_pod_containers', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_core_pod_ephemeral_containers" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"target_container_name" text,
	"pod_cq_id" uuid,
	"name" text,
	"image" text,
	"command" text[],
	"args" text[],
	"working_dir" text,
	"env_from" jsonb,
	"resources_limits" jsonb,
	"resources_requests" jsonb,
	"liveness_probe" jsonb,
	"readiness_probe" jsonb,
	"startup_probe" jsonb,
	"lifecycle" jsonb,
	"termination_message_path" text,
	"termination_message_policy" text,
	"image_pull_policy" text,
	"security_context" jsonb,
	"stdin" boolean,
	"stdin_once" boolean,
	"tty" boolean,
	CONSTRAINT k8s_core_pod_ephemeral_containers_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_core_pod_ephemeral_containers (cq_fetch_date, pod_cq_id);
SELECT setup_tsdb_child('k8s_core_pod_ephemeral_containers', 'pod_cq_id', 'k8s_core_pods', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_core_pod_ephemeral_container_ports" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"pod_ephemeral_container_cq_id" uuid,
	"name" text,
	"host_port" integer,
	"container_port" integer,
	"protocol" text,
	"host_ip" text,
	CONSTRAINT k8s_core_pod_ephemeral_container_ports_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_core_pod_ephemeral_container_ports (cq_fetch_date, pod_ephemeral_container_cq_id);
SELECT setup_tsdb_child('k8s_core_pod_ephemeral_container_ports', 'pod_ephemeral_container_cq_id', 'k8s_core_pod_ephemeral_containers', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_core_pod_ephemeral_container_envs" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"pod_ephemeral_container_cq_id" uuid,
	"name" text,
	"value" text,
	"value_from_field_ref_api_version" text,
	"value_from_field_ref_field_path" text,
	"value_from_resource_field_ref_container_name" text,
	"value_from_resource_field_ref_resource" text,
	"value_from_resource_field_ref_divisor_format" text,
	"value_from_config_map_key_ref_local_object_reference_name" text,
	"value_from_config_map_key_ref_key" text,
	"value_from_config_map_key_ref_optional" boolean,
	"value_from_secret_key_ref_local_object_reference_name" text,
	"value_from_secret_key_ref_key" text,
	"value_from_secret_key_ref_optional" boolean,
	CONSTRAINT k8s_core_pod_ephemeral_container_envs_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_core_pod_ephemeral_container_envs (cq_fetch_date, pod_ephemeral_container_cq_id);
SELECT setup_tsdb_child('k8s_core_pod_ephemeral_container_envs', 'pod_ephemeral_container_cq_id', 'k8s_core_pod_ephemeral_containers', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_core_pod_ephemeral_container_volume_mounts" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"pod_ephemeral_container_cq_id" uuid,
	"name" text,
	"read_only" boolean,
	"mount_path" text,
	"sub_path" text,
	"mount_propagation" text,
	"sub_path_expr" text,
	CONSTRAINT k8s_core_pod_ephemeral_container_volume_mounts_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_core_pod_ephemeral_container_volume_mounts (cq_fetch_date, pod_ephemeral_container_cq_id);
SELECT setup_tsdb_child('k8s_core_pod_ephemeral_container_volume_mounts', 'pod_ephemeral_container_cq_id', 'k8s_core_pod_ephemeral_containers', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_core_pod_ephemeral_container_volume_devices" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"pod_ephemeral_container_cq_id" uuid,
	"name" text,
	"device_path" text,
	CONSTRAINT k8s_core_pod_ephemeral_container_volume_devices_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_core_pod_ephemeral_container_volume_devices (cq_fetch_date, pod_ephemeral_container_cq_id);
SELECT setup_tsdb_child('k8s_core_pod_ephemeral_container_volume_devices', 'pod_ephemeral_container_cq_id', 'k8s_core_pod_ephemeral_containers', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_core_pod_volumes" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"pod_cq_id" uuid,
	"name" text,
	"host_path" jsonb,
	"empty_dir" jsonb,
	"gce_persistent_disk" jsonb,
	"aws_elastic_block_store" jsonb,
	"secret" jsonb,
	"nfs" jsonb,
	"iscsi" jsonb,
	"glusterfs" jsonb,
	"persistent_volume_claim" jsonb,
	"rbd" jsonb,
	"flex_volume" jsonb,
	"cinder" jsonb,
	"ceph_fs" jsonb,
	"flocker" jsonb,
	"downward_api" jsonb,
	"fc" jsonb,
	"azure_file" jsonb,
	"config_map" jsonb,
	"vsphere_volume" jsonb,
	"quobyte" jsonb,
	"azure_disk" jsonb,
	"photon_persistent_disk" jsonb,
	"projected" jsonb,
	"portworx_volume" jsonb,
	"scale_io" jsonb,
	"storage_os" jsonb,
	"csi" jsonb,
	"ephemeral" jsonb,
	CONSTRAINT k8s_core_pod_volumes_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_core_pod_volumes (cq_fetch_date, pod_cq_id);
SELECT setup_tsdb_child('k8s_core_pod_volumes', 'pod_cq_id', 'k8s_core_pods', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_core_pod_init_container_statuses" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"pod_cq_id" uuid,
	"name" text,
	"state" jsonb,
	"last_state" jsonb,
	"ready" boolean,
	"restart_count" integer,
	"image" text,
	"image_id" text,
	"container_id" text,
	"started" boolean,
	CONSTRAINT k8s_core_pod_init_container_statuses_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_core_pod_init_container_statuses (cq_fetch_date, pod_cq_id);
SELECT setup_tsdb_child('k8s_core_pod_init_container_statuses', 'pod_cq_id', 'k8s_core_pods', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_core_pod_container_statuses" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"pod_cq_id" uuid,
	"name" text,
	"state" jsonb,
	"last_state" jsonb,
	"ready" boolean,
	"restart_count" integer,
	"image" text,
	"image_id" text,
	"container_id" text,
	"started" boolean,
	CONSTRAINT k8s_core_pod_container_statuses_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_core_pod_container_statuses (cq_fetch_date, pod_cq_id);
SELECT setup_tsdb_child('k8s_core_pod_container_statuses', 'pod_cq_id', 'k8s_core_pods', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_core_pod_ephemeral_container_statuses" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"pod_cq_id" uuid,
	"name" text,
	"state" jsonb,
	"last_state" jsonb,
	"ready" boolean,
	"restart_count" integer,
	"image" text,
	"image_id" text,
	"container_id" text,
	"started" boolean,
	CONSTRAINT k8s_core_pod_ephemeral_container_statuses_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_core_pod_ephemeral_container_statuses (cq_fetch_date, pod_cq_id);
SELECT setup_tsdb_child('k8s_core_pod_ephemeral_container_statuses', 'pod_cq_id', 'k8s_core_pods', 'cq_id');

-- Resource: core.resource_quotas
CREATE TABLE IF NOT EXISTS "k8s_core_resource_quotas" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"context" text,
	"kind" text,
	"api_version" text,
	"name" text,
	"generate_name" text,
	"namespace" text,
	"self_link" text,
	"uid" text,
	"resource_version" text,
	"generation" bigint,
	"deletion_grace_period_seconds" bigint,
	"labels" jsonb,
	"annotations" jsonb,
	"owner_references" jsonb,
	"finalizers" text[],
	"cluster_name" text,
	"managed_fields" jsonb,
	"hard" jsonb,
	"scopes" text[],
	"status_hard" jsonb,
	"status_used" jsonb,
	CONSTRAINT k8s_core_resource_quotas_pk PRIMARY KEY(cq_fetch_date,uid),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('k8s_core_resource_quotas');
CREATE TABLE IF NOT EXISTS "k8s_core_resource_quota_scope_selector_match_expressions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"resource_quota_cq_id" uuid,
	"scope_name" text,
	"operator" text,
	"values" text[],
	CONSTRAINT k8s_core_resource_quota_scope_selector_match_expressions_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_core_resource_quota_scope_selector_match_expressions (cq_fetch_date, resource_quota_cq_id);
SELECT setup_tsdb_child('k8s_core_resource_quota_scope_selector_match_expressions', 'resource_quota_cq_id', 'k8s_core_resource_quotas', 'cq_id');

-- Resource: core.service_accounts
CREATE TABLE IF NOT EXISTS "k8s_core_service_accounts" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"context" text,
	"kind" text,
	"api_version" text,
	"name" text,
	"generate_name" text,
	"namespace" text,
	"self_link" text,
	"uid" text,
	"resource_version" text,
	"generation" bigint,
	"deletion_grace_period_seconds" bigint,
	"labels" jsonb,
	"annotations" jsonb,
	"owner_references" jsonb,
	"finalizers" text[],
	"cluster_name" text,
	"managed_fields" jsonb,
	"automount_service_account_token" boolean,
	"pull_secret_names" text[],
	CONSTRAINT k8s_core_service_accounts_pk PRIMARY KEY(cq_fetch_date,uid),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('k8s_core_service_accounts');
CREATE TABLE IF NOT EXISTS "k8s_core_service_account_secrets" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"service_account_cq_id" uuid,
	"kind" text,
	"namespace" text,
	"name" text,
	"uid" text,
	"api_version" text,
	"resource_version" text,
	"field_path" text,
	CONSTRAINT k8s_core_service_account_secrets_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_core_service_account_secrets (cq_fetch_date, service_account_cq_id);
SELECT setup_tsdb_child('k8s_core_service_account_secrets', 'service_account_cq_id', 'k8s_core_service_accounts', 'cq_id');

-- Resource: core.services
CREATE TABLE IF NOT EXISTS "k8s_core_services" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"context" text,
	"kind" text,
	"api_version" text,
	"name" text,
	"namespace" text,
	"uid" text,
	"resource_version" text,
	"generation" bigint,
	"deletion_grace_period_seconds" bigint,
	"labels" jsonb,
	"annotations" jsonb,
	"owner_references" jsonb,
	"finalizers" text[],
	"cluster_name" text,
	"selector" jsonb,
	"cluster_ip" inet,
	"cluster_ips" inet[],
	"type" text,
	"external_ips" inet[],
	"session_affinity" text,
	"load_balancer_ip" text,
	"load_balancer_source_ranges" text[],
	"external_name" text,
	"external_traffic_policy" text,
	"health_check_node_port" integer,
	"publish_not_ready_addresses" boolean,
	"session_affinity_config_client_ip_timeout_seconds" integer,
	"ip_families" text[],
	"ip_family_policy" text,
	"allocate_load_balancer_node_ports" boolean,
	"load_balancer_class" text,
	"internal_traffic_policy" text,
	CONSTRAINT k8s_core_services_pk PRIMARY KEY(cq_fetch_date,uid),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('k8s_core_services');
CREATE TABLE IF NOT EXISTS "k8s_core_service_ports" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"service_cq_id" uuid,
	"name" text,
	"protocol" text,
	"app_protocol" text,
	"port" integer,
	"target_port_type" bigint,
	"target_port_int_val" integer,
	"target_port_str_val" text,
	"node_port" integer,
	CONSTRAINT k8s_core_service_ports_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_core_service_ports (cq_fetch_date, service_cq_id);
SELECT setup_tsdb_child('k8s_core_service_ports', 'service_cq_id', 'k8s_core_services', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_core_service_load_balancer_ingresses" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"service_cq_id" uuid,
	"ip" text,
	"hostname" text,
	CONSTRAINT k8s_core_service_load_balancer_ingresses_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_core_service_load_balancer_ingresses (cq_fetch_date, service_cq_id);
SELECT setup_tsdb_child('k8s_core_service_load_balancer_ingresses', 'service_cq_id', 'k8s_core_services', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_core_service_load_balancer_ingress_ports" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"service_load_balancer_ingress_cq_id" uuid,
	"port" integer,
	"protocol" text,
	"error" text,
	CONSTRAINT k8s_core_service_load_balancer_ingress_ports_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_core_service_load_balancer_ingress_ports (cq_fetch_date, service_load_balancer_ingress_cq_id);
SELECT setup_tsdb_child('k8s_core_service_load_balancer_ingress_ports', 'service_load_balancer_ingress_cq_id', 'k8s_core_service_load_balancer_ingresses', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_core_service_conditions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"service_cq_id" uuid,
	"type" text,
	"status" text,
	"observed_generation" bigint,
	"reason" text,
	"message" text,
	CONSTRAINT k8s_core_service_conditions_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_core_service_conditions (cq_fetch_date, service_cq_id);
SELECT setup_tsdb_child('k8s_core_service_conditions', 'service_cq_id', 'k8s_core_services', 'cq_id');

-- Resource: networking.network_policies
CREATE TABLE IF NOT EXISTS "k8s_networking_network_policies" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"context" text,
	"kind" text,
	"api_version" text,
	"name" text,
	"generate_name" text,
	"namespace" text,
	"self_link" text,
	"uid" text,
	"resource_version" text,
	"generation" bigint,
	"deletion_grace_period_seconds" bigint,
	"labels" jsonb,
	"annotations" jsonb,
	"owner_references" jsonb,
	"finalizers" text[],
	"cluster_name" text,
	"managed_fields" jsonb,
	"pod_selector_match_labels" jsonb,
	"policy_types" text[],
	CONSTRAINT k8s_networking_network_policies_pk PRIMARY KEY(cq_fetch_date,uid),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('k8s_networking_network_policies');
CREATE TABLE IF NOT EXISTS "k8s_networking_network_policy_pod_selector_match_expressions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"network_policy_cq_id" uuid,
	"key" text,
	"operator" text,
	"values" text[],
	CONSTRAINT k8s_networking_network_policy_pod_selector_match_expressions_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_networking_network_policy_pod_selector_match_expressions (cq_fetch_date, network_policy_cq_id);
SELECT setup_tsdb_child('k8s_networking_network_policy_pod_selector_match_expressions', 'network_policy_cq_id', 'k8s_networking_network_policies', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_networking_network_policy_ingress" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"network_policy_cq_id" uuid,
	"network_policy_uid" text,
	CONSTRAINT k8s_networking_network_policy_ingress_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_networking_network_policy_ingress (cq_fetch_date, network_policy_cq_id);
SELECT setup_tsdb_child('k8s_networking_network_policy_ingress', 'network_policy_cq_id', 'k8s_networking_network_policies', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_networking_network_policy_ingress_ports" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"network_policy_ingress_cq_id" uuid,
	"protocol" text,
	"port_type" bigint,
	"port_int_val" integer,
	"port_str_val" text,
	"end_port" integer,
	CONSTRAINT k8s_networking_network_policy_ingress_ports_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_networking_network_policy_ingress_ports (cq_fetch_date, network_policy_ingress_cq_id);
SELECT setup_tsdb_child('k8s_networking_network_policy_ingress_ports', 'network_policy_ingress_cq_id', 'k8s_networking_network_policy_ingress', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_networking_network_policy_ingress_from" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"network_policy_ingress_cq_id" uuid,
	"pod_selector_match_labels" jsonb,
	"pod_selector_match_expressions" jsonb,
	"namespace_selector_match_labels" jsonb,
	"namespace_selector_match_expressions" jsonb,
	"ip_block_cidr" text,
	"ip_block_except" text[],
	CONSTRAINT k8s_networking_network_policy_ingress_from_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_networking_network_policy_ingress_from (cq_fetch_date, network_policy_ingress_cq_id);
SELECT setup_tsdb_child('k8s_networking_network_policy_ingress_from', 'network_policy_ingress_cq_id', 'k8s_networking_network_policy_ingress', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_networking_network_policy_egress" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"network_policy_cq_id" uuid,
	"network_policy_uid" text,
	CONSTRAINT k8s_networking_network_policy_egress_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_networking_network_policy_egress (cq_fetch_date, network_policy_cq_id);
SELECT setup_tsdb_child('k8s_networking_network_policy_egress', 'network_policy_cq_id', 'k8s_networking_network_policies', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_networking_network_policy_egress_ports" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"network_policy_egress_cq_id" uuid,
	"protocol" text,
	"port_type" bigint,
	"port_int_val" integer,
	"port_str_val" text,
	"end_port" integer,
	CONSTRAINT k8s_networking_network_policy_egress_ports_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_networking_network_policy_egress_ports (cq_fetch_date, network_policy_egress_cq_id);
SELECT setup_tsdb_child('k8s_networking_network_policy_egress_ports', 'network_policy_egress_cq_id', 'k8s_networking_network_policy_egress', 'cq_id');
CREATE TABLE IF NOT EXISTS "k8s_networking_network_policy_egress_to" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"network_policy_egress_cq_id" uuid,
	"pod_selector_match_labels" jsonb,
	"pod_selector_match_expressions" jsonb,
	"namespace_selector_match_labels" jsonb,
	"namespace_selector_match_expressions" jsonb,
	"ip_block_cidr" text,
	"ip_block_except" text[],
	CONSTRAINT k8s_networking_network_policy_egress_to_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_networking_network_policy_egress_to (cq_fetch_date, network_policy_egress_cq_id);
SELECT setup_tsdb_child('k8s_networking_network_policy_egress_to', 'network_policy_egress_cq_id', 'k8s_networking_network_policy_egress', 'cq_id');

-- Resource: rbac.role_bindings
CREATE TABLE IF NOT EXISTS "k8s_rbac_role_bindings" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"context" text,
	"kind" text,
	"api_version" text,
	"name" text,
	"generate_name" text,
	"namespace" text,
	"self_link" text,
	"uid" text,
	"resource_version" text,
	"generation" bigint,
	"deletion_grace_period_seconds" bigint,
	"labels" jsonb,
	"annotations" jsonb,
	"owner_references" jsonb,
	"finalizers" text[],
	"cluster_name" text,
	"managed_fields" jsonb,
	"role_ref_api_group" text,
	"role_ref_kind" text,
	"role_ref_name" text,
	CONSTRAINT k8s_rbac_role_bindings_pk PRIMARY KEY(cq_fetch_date,uid),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('k8s_rbac_role_bindings');
CREATE TABLE IF NOT EXISTS "k8s_rbac_role_binding_subjects" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"role_binding_cq_id" uuid,
	"kind" text,
	"api_group" text,
	"name" text,
	"namespace" text,
	CONSTRAINT k8s_rbac_role_binding_subjects_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_rbac_role_binding_subjects (cq_fetch_date, role_binding_cq_id);
SELECT setup_tsdb_child('k8s_rbac_role_binding_subjects', 'role_binding_cq_id', 'k8s_rbac_role_bindings', 'cq_id');

-- Resource: rbac.roles
CREATE TABLE IF NOT EXISTS "k8s_rbac_roles" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"context" text,
	"kind" text,
	"api_version" text,
	"name" text,
	"generate_name" text,
	"namespace" text,
	"self_link" text,
	"uid" text,
	"resource_version" text,
	"generation" bigint,
	"deletion_grace_period_seconds" bigint,
	"labels" jsonb,
	"annotations" jsonb,
	"owner_references" jsonb,
	"finalizers" text[],
	"cluster_name" text,
	"managed_fields" jsonb,
	CONSTRAINT k8s_rbac_roles_pk PRIMARY KEY(cq_fetch_date,uid),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('k8s_rbac_roles');
CREATE TABLE IF NOT EXISTS "k8s_rbac_role_rules" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"role_cq_id" uuid,
	"verbs" text[],
	"api_groups" text[],
	"resources" text[],
	"resource_names" text[],
	"non_resource_urls" text[],
	CONSTRAINT k8s_rbac_role_rules_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON k8s_rbac_role_rules (cq_fetch_date, role_cq_id);
SELECT setup_tsdb_child('k8s_rbac_role_rules', 'role_cq_id', 'k8s_rbac_roles', 'cq_id');
